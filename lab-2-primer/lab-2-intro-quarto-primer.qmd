---
title: "Lab 2: Introduction to R Primer"
format: 
  live-html:
    webr:
      packages: 
        - ggformula
        - mosaic
        - tidyverse
      resources: 
        - https://raw.githubusercontent.com/csumb-stats-ds/stat-250-lab-primers/refs/heads/main/lab-2-primer/penguins.csv
      cell-options:
        warning: true
        completion: false
execute: 
  warning: false
  message: false
  echo: true
code-copy: true
code-overflow: wrap
toc: true
css: ../styles.css
---


{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}
{{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{r}
#| label: theme
#| include: false
#| edit: false
library(ggplot2)
library(tidyverse)
theme_set(theme_light())
options(ggplot2.continuous.color = scale_color_viridis_c, 
        ggplot2.continuous.fill = scale_fill_viridis_c,
        ggplot2.discrete.color = scale_color_viridis_d,
        ggplot2.discrete.fill = scale_fill_viridis_d)
```

::: {.callout-note collapse="true"}
## Digital Accessibility

Please note that all images were created with modifications to the defaults to make them digitally accessible. If you recreate this code in another environment, your plots have different colors and backgrounds.
:::


## Introduction

This Primer will introduce you to using Markdown to create documents. The good news is: you've already been doing this! The .qmd files you are using are **Q**uarto documents that are written with **m**ark**d**own and you've been editing them since week 1. We're just going to make some of what you've already learned more explicit. 


## Part 1: Introduction to Markdown

Markdown is a way to encode formatting on text in an unobtrusive way (compared to, say, html). Quarto documents use the Markdown language to code the text in the document, and allow you to embed code chunks that execute R code. Your finished .qmd document can be 'rendered' to other document types, and the markdown language converts to specific formatting. 

Check out the markdown and rendered text side-by-side:

::: {.grid}

::: {.g-col-6}

````markdown
When you do so, you will see this Markdown document converted to an HTML document and **this phrase is now bold**, *this phrase is italicized*, and `this phrase is written to denote R code`. To do the same in your own documents, you can use the same asterisks (*) or back ticks (`) as shown in the unrendered document. 
````
:::

::: {.g-col-6}

When you do so, you will see this Markdown document converted to an HTML document and **this phrase is now bold**, *this phrase is italicized*, and `this phrase is written to denote R code`. To do the same in your own documents, you can use the same asterisks (*) or back ticks (`) as shown in the unrendered document. 

:::
:::


We are going to learn some of the basic Quarto editing techniques. 


### 1.0 Overview of Quarto

Before we continue, check out this Tutorial [Hello Quarto (25 min)](https://quarto.org/docs/get-started/hello/rstudio.html). Remember, you will want to take notes as you move through the tutorials. You can also read more via this optional introduction to [Quarto (30 min, all of Chapter 28)](https://r4ds.hadley.nz/quarto.html). 



The biggest thing to realize is that a Quarto document contains three types of content: 

1.  A **YAML header** surrounded by `---`s at the top.
2.  **Chunks** of R code surrounded by ```` ```{r} ```` and ```` ``` ````.
3.  Text mixed with simple text formatting like `# heading` and `_italics_`.

For our class (STAT 250), you will generally only be editing the **Chunks** and the Text.


### 1.1. Basic Markdown

Markdown can format a document just like you format your Word documents in other classes, but we'll just cover some of the basics here. You've already learned *italics*, **bold** and `code` displays. Markdown can make lists as well, using a variety of encoding (see the online tutorial). You've probably also noticed that when you format your text, its color display changes, to help you see the formatting easier. 

::: {.grid}
::: {.g-col-6}
**Unrendered**
:::
::: {.g-col-6}
**Rendered**
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
*italics*  or _italics_
````
:::
::: {.g-col-6}
*italics*  or _italics_
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
**bold**
````
:::
::: {.g-col-6}
**bold**
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
`code`  
````
:::
::: {.g-col-6}
`code`  
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
subscript~2~    
````
:::
::: {.g-col-6}
subscript~2~    
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
superscript^2^  
````
:::
::: {.g-col-6}
superscript^2^   
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
> Text block for answers

````
:::
::: {.g-col-6}
> Text block for answers  

:::
:::
::: {.grid}
::: {.g-col-6}
````markdown

# Header Size 1
````
:::
::: {.g-col-6}
# Header Size 1 {.unlisted}
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
## Header Size 2
````
:::
::: {.g-col-6}
## Header Size 2 {.unlisted}
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown

### Header Size 3
````
:::
::: {.g-col-6}
### Header Size 3 {.unlisted}
:::
:::
::: {.grid}
::: {.g-col-6}
````markdown
Markdown Comments Will Not Render: <!--- this comment won't show up rendered --->
````
:::
::: {.g-col-6}
Markdown Comments Will Not Render: <!--- this comment won't show up rendered --->
:::
:::


One last thing of note - markdown works best with "space to breathe." If you find that something isn't rendering correctly, making sure there is a blank line between the text you are trying to format and the next helps. 

::: {.grid}

::: {.g-col-6}

````markdown
For example:
> Although this is green unrendered, it doesn't appear with the formatting we want. Try adding an "enter" between the "For example:" and the start of this line and render again. Did it fix it?
You'll also notice that if there are no line breaks, this formatting doesn't end, so you don't need to put a ">" before each line answer. 

````
:::

::: {.g-col-6}
For example:
> Although this is green unrendered, it doesn't appear with the formatting we want. Try adding an "enter" between the "For example:" and the start of this line and render again. Did it fix it?
You'll also notice that if there are no line breaks, this formatting doesn't end, so you don't need to put a ">" before each line answer.  

:::
:::

Notice what happens when we add spacing:


::: {.grid}

::: {.g-col-6}

````markdown
For example:

> Although this is green unrendered, it doesn't appear with the formatting we want. Try adding an "enter" between the "For example:" and the start of this line and render again. Did it fix it?
You'll also notice that if there are no line breaks, this formatting doesn't end, so you don't need to put a ">" before each line answer. 

````
:::

::: {.g-col-6}
For example:  

> Although this is green unrendered, it doesn't appear with the formatting we want. Try adding an "enter" between the "For example:" and the start of this line and render again. Did it fix it?
You'll also notice that if there are no line breaks, this formatting doesn't end, so you don't need to put a ">" before each line answer. 

:::
:::






### 1.2. Creating Tables

The easiest way to make a table in markdown is using this format: 

::: {.grid}

::: {.g-col-6}

**Unrendered**

````markdown

| Right | Left | Default | Center | 
|------:|:-----|---------|:------:| 
|   12  |  12  |    12   |    12  | 
|  123  |  123 |   123   |   123  | 
|    1  |    1 |     1   |     1  | 

````
:::

::: {.g-col-6}

**Rendered**

| Right | Left | Default | Center | 
|------:|:-----|---------|:------:| 
|   12  |  12  |    12   |    12  | 
|  123  |  123 |   123   |   123  | 
|    1  |    1 |     1   |     1  | 

:::
:::


The : denotes where the cell values align; default is fine on labs. 
You might also notice that it doesn't mater if my `|` don't line up when we edit a table once we render:

::: {.grid}

::: {.g-col-6}

**Unrendered**

````markdown

| Right | Left | Default | Center | 
|------:|:-----|---------|:------:| 
|   12  |  124 |    12|    12  | 
|  123  |     123 |   123 |   123  | 
|    1  |  176 |     1   |     1  | 

````
:::

::: {.g-col-6}

**Rendered**

| Right | Left | Default | Center | 
|------:|:-----|---------|:------:| 
|   12  |  124 |    12|    12  | 
|  123  |     123 |   123 |   123  | 
|    1  |  176 |     1   |     1  | 

:::
:::


That said, it is easier to read in the .qmd file if you add spaces and dashes as needed so that they all do line up.


### 1.3. Mathematics

We often want to write small mathematics equations or write mathematical symbols. This is actually much easier in .qmd than in Word. 

We surround an equation with `$` signs: ````$e=mc^2$```` which will appear as $e=mc^2$ in the rendered document.

Here are some examples of the type of mathematics you will use within your Quarto documents.

#### Greek Letters

We often want to use statistical symbols within markdown to denote parameters with Greek letters. They are called by using a backslash (`\`) and then the full name of the greek letter, such as `\alpha`, and surrounded by `$` to be called within the equation-mode: 

::: {.grid}
::: {.g-col-6}
````markdown
$\sigma$
$\alpha$
$\mu$
$\beta$
````
:::
::: {.g-col-6}
$\sigma$  
$\alpha$  
$\mu$  
$\beta$  
:::
:::

#### Superscripts and Subscripts
We can include sub- and superscripts to make our parameters and statistics specific. Note: once the equation is surrounded by `$`'s we don't need the markdown edit for superscript like above. In math mode, you might see:  

::: {.grid}
::: {.g-col-6}
````markdown
$x^2$  
$H_0$  
$\mu_1$  
````
:::
::: {.g-col-6}
$x^2$  
$H_0$  
$\mu_1$   
:::
:::

We might want to make our subscript a longer phrase in statistics, to help denote our population of interest when we have more than one. We surround whatever we want to stay in a subscript with `{}`, such as: 

::: {.grid}
::: {.g-col-6}
````markdown
$\mu_{female}$  
$\mu_{male}$ 
````
:::
::: {.g-col-6}
$\mu_{female}$  
$\mu_{male}$ 
:::
:::


#### Symbols over Letters
We can call our special statistical symbols in a similar way, such as `\bar{x}`. In this case, the `bar` symbol will be applied over the `x`, to make our statistical symbol for sample mean: $\bar{x}$. 

::: {.grid}
::: {.g-col-6}
````markdown
$\bar{x}$  
$\hat{p}$  
$\hat{\beta}_1$  
````
:::
::: {.g-col-6}
$\bar{x}$  
$\hat{p}$  
$\hat{\beta}_1$  
:::
:::



#### Equations

Finally, we can write little equations for our outputs:, like $\bar{x} = 3.54$.

::: {.grid}
::: {.g-col-6}
````markdown
$\bar{x} = 3.54$  
$\hat{y} = \hat{\beta}_0 + \hat{\beta}_1 x$  
````
:::
::: {.g-col-6}
$\bar{x} = 3.54$  
$\hat{y} = \hat{\beta}_0 + \hat{\beta}_1 x$  
:::
:::
 

### 1.4. Code Chunks

You've learned how to insert code chunks using the shortcuts Ctrl-Alt-I (or Cmd-Alt-I), by clicking the green Insert +C button above, but you can also just type the two sets of code that surround code chunks, ` ```{r} ` and the ending ` ``` ` . *Note, those are back-ticks, found above the tab key, not single quotation marks.* 

We can add labels `#| label:` to support easy navigation as well, but be careful, **DO NOT REPEAT LABELS** or this will cause an error when you render the .qmd file. 

```{r}
#| echo: fenced
#| label: simple-addition
1 + 1
```

At the beginning of each Quarto document there should be a special code chunk called the **setup** chunk. This is where we read the packages used in the rest of the document. We often use `#| include: false` to as an option in the **setup** code chunk to hide the output in the rendered document.  

```{r}
#| echo: fenced
#| label: setup
library(tidyverse)
library(mosaic)
library(ggformula)
```


### 1.5 In-line code

```{r}
#| label: function
#| include: false
inline <- function(x = "") paste0("`r ", x, "`")
```

One of the neat features in Quarto files is the ability to combine code chunks, text, and automatically include (or not-- but we always will in this class) code and outputs in the finished document. We've been writing code in the code chunks, but you can also write it directly in line with the text using some specific formatting. 

Let's demonstrate with our small `study` dataset. First, we need to read in the data as an `object`.

```{r}
#| echo: fenced
#| label: read-study-data
study <- read_csv("study.csv", show_col_types = FALSE) #stops some extra output
```

Then we could calculate the mean:

```{r}
#| echo: fenced
#| label: mean-wk1
mean(~wk1, data = study)
```

By running the code as above, we calculated the mean, but didn't save it as an `object` -- it just prints to screen and is forgotten by R. If we save the output as an `object`, we can use it within the Quarto file. When you save an output to an `object` name, it will not print the value to the screen unless you tell R to provide the value. 

```{r}
#| echo: fenced
#| label: mean-wk1-assigned
mwk1 <- mean(~wk1, data = study) # calculates mean and saves it as mWk1
mwk1 # prints to screen the value saved to the object name
```

We can use the named objects to display the value stored within it in-line with our text by using the format:``r ``. We already know that paired back-ticks mark text to be printed out in code font. By including the `r` in the front, we tell it what follows is *actual* code to be run.  

For example: 

::: {.grid}
::: {.g-col-6}
````markdown
The mean number of hours studied in week 1 is `r inline('mwk1')` hours.
````
:::
::: {.g-col-6}
The mean number of hours studied in week 1 is `r mwk1` hours.
:::
:::
 

Using a stored object name is useful if you are going to use the value often (to cut down on typing), but if you only need to use the value small number of times, you can also write the code directly in line. For example: 

::: {.grid}
::: {.g-col-6}
````markdown
The maximum number of hours studied in week two is `r inline('max(~wk2, data = study)')` hours
````
:::
::: {.g-col-6}
the maximum number of hours studied in week two is `r max(~wk2, data = study)` hours
:::
:::

Notice that we never ran that code in any code chunk. It was run and displayed completely in-line.



### 1.6. Checking code & Rendering your Document

You can run specific code chunks to check their output by pressing the green play button to run the specific code chunk, or the icon next to it to run all code chunks prior to that code chunk. 

#### Viewing Your Rendered Document

If you want to check your Markdown editing, you can render the document and view it in the 'Viewer' Pane by pressing the 'Render' button at the top of the Quarto document pane. Make sure the setting (gear icon above) is set to 'Preview in Viewer pane'. 


#### Changing the Document Type

You can change the document type you knit to automatically by changing the output type in the YAML header from `format: html` to `format: docx` and press the 'Render' button. Your word document will be created in the project folder! (In this class, we will always use html documents; please don't edit the YAML header of your labs; we showed you this simply for future information.)

``` yaml
---
title: "My report"
format: html
execute:
  echo: true
  error: false
---  
```


#### Errors in your Code

If there is an error in your file, it will not render. When .qmd files render, they run on a completely clean environment. So if you somehow loaded data or something else not with code in your .qmd file, the rendering process will create an error.  

If you cannot figure out the error, you can generally still get your document to render by changing `error: false` to `error: true` in the YAML code at the top.

``` yaml
---
title: "My report"
format: html
execute:
  echo: true
  error: true
---  
```

This will print out any errors in your code chunks, but still render the document.

#### Errors in your Markdown  

The most common errors in your markdown that can cause issues are deleting back ticks (`) around your code chunks or dashes (-) from around the YAML code, so always check that first.


## Part 2: Exploratory Data Analysis for Single Numeric Variables - R Code

Here is a review of some of the code you will use in the rest of Lab 2.  

Remember to first run the set up chunks first and check that all necessary packages are loaded.


```{webr}
#| label: load-packages
library(tidyverse) #data management
library(ggformula) #data visualization
library(mosaic) #data summary statistics
```

### Reading in Data

Next, we must be sure to read in the data AND assign it to an `object` name so that we can call it later in other functions.  

```{webr}
#| label: read-data-live
penguins <- read_csv("penguins.csv")
```



### Histograms

Histograms are a great way to explore the distribution (shape, center, spread, outliers) of a variable. Here is the basic structure for a histogram of body mass of the penguins. Add the following arguments.  

- a x-axis label that says "Body Mass (g) of Three Penguin Species in the Palmer Archipelago"  
- a y-axis label that say "Number of Penguins" 
- modify the bin width to 200
- add the argument `color = "black"` to outline the bars

```{webr}
#| label: histogram
#| exercise: ex-hist

gf_histogram(~ body_mass_g, 
             data = penguins)
```


::: {.solution exercise="ex-hist"}

#### Solution

```{webr}
#| exercise: ex-hist
#| solution: true
gf_histogram(~ body_mass_g, 
             data = penguins,
             xlab = "Body Mass (g) of Three Penguin Species in the Palmer Archipelago",
             ylab = "Number of Penguins",
             binwidth = 200,
             color = "black")
```

:::


### Boxplots  



### Summary Statistics




